// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x", "linux-musl", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique
  userAgent   String?
  ipAddress   String?
  language    String   @default("en")
  needsHuman  Boolean  @default(false) // Flag for human assistance
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    ChatMessage[]
  handoffs    ChatHandoff[]
  agentChats  AgentChat[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id          String   @id @default(cuid())
  sessionId   String
  message     String
  response    String
  queryType   String?
  processingTime Int?
  isSuccessful Boolean @default(true)
  createdAt   DateTime @default(now())
  
  session     ChatSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  
  @@map("chat_messages")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  category    String
  subcategory String?
  question    String
  answer      String
  keywords    String[]
  sourceUrl   String?  // URL where this knowledge was scraped from
  priority    Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("knowledge_base")
}

model FlightCache {
  id            String   @id @default(cuid())
  flightNumber  String   @unique
  flightData    Json
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  
  @@map("flight_cache")
}

model FeedbackForm {
  id          String   @id @default(cuid())
  sessionId   String
  rating      Int?
  feedback    String?
  email       String?
  phone       String?
  isResolved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@map("feedback_forms")
}

model SupportAgent {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String   // Hashed password
  role        String   @default("agent") // agent, supervisor, admin
  skills      String[] // Areas of expertise
  isActive    Boolean  @default(true)
  isOnline    Boolean  @default(false)
  maxChats    Int      @default(5) // Maximum concurrent chats
  currentChats Int     @default(0) // Current active chats
  lastLogin   DateTime?
  lastActivity DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  handoffs    ChatHandoff[]
  agentChats  AgentChat[]
  agentNotes  AgentNote[]
  
  @@map("support_agents")
}

model ChatHandoff {
  id          String   @id @default(cuid())
  sessionId   String
  agentId     String?
  reason      String   // Why handoff was requested
  priority    String   @default("normal") // low, normal, high, urgent
  status      String   @default("pending") // pending, assigned, in_progress, completed, cancelled
  context     Json?    // Chat context and history
  waitTime    Int?     // Time waited before assignment (seconds)
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  session     ChatSession @relation(fields: [sessionId], references: [sessionId])
  agent       SupportAgent? @relation(fields: [agentId], references: [id])
  
  @@map("chat_handoffs")
}

model AgentChat {
  id          String   @id @default(cuid())
  sessionId   String
  agentId     String
  status      String   @default("active") // active, on_hold, completed
  startedAt   DateTime @default(now())
  endedAt     DateTime?
  duration    Int?     // Duration in seconds
  satisfaction Int?    // 1-5 rating
  notes       String?
  
  // Relations
  session     ChatSession @relation(fields: [sessionId], references: [sessionId])
  agent       SupportAgent @relation(fields: [agentId], references: [id])
  
  @@map("agent_chats")
}

model AgentNote {
  id          String   @id @default(cuid())
  sessionId   String
  agentId     String
  note        String
  isInternal  Boolean  @default(true) // Internal notes vs customer-visible
  createdAt   DateTime @default(now())
  
  // Relations
  agent       SupportAgent @relation(fields: [agentId], references: [id])
  
  @@map("agent_notes")
}

model QuickResponse {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String?
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("quick_responses")
}

model ScrapingCache {
  id          String   @id @default(cuid())
  url         String   @unique
  title       String?  // Page title
  content     String   // Scraped text content
  headings    String[] // Extracted headings
  links       Json?    // Extracted links as JSON
  lastScraped DateTime @default(now())
  createdAt   DateTime @default(now())
  
  @@map("scraping_cache")
}

model ChatAnalytics {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  totalChats  Int      @default(0)
  successful  Int      @default(0)
  failed      Int      @default(0)
  avgResponse Float?
  topQueries  Json?
  
  @@unique([date])
  @@map("chat_analytics")
}

model ApiQuota {
  id          String   @id @default(cuid())
  provider    String   // gemini, huggingface, etc.
  date        DateTime @db.Date
  dailyLimit  Int      @default(1500) // Default limit for Gemini free tier
  usedCount   Int      @default(0)
  resetAt     DateTime // When the quota resets (usually midnight UTC)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([provider, date])
  @@map("api_quota")
} 