// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique
  userAgent   String?
  ipAddress   String?
  language    String   @default("en")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    ChatMessage[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id          String   @id @default(cuid())
  sessionId   String
  message     String
  response    String
  queryType   String?
  processingTime Int?
  isSuccessful Boolean @default(true)
  createdAt   DateTime @default(now())
  
  session     ChatSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  
  @@map("chat_messages")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  category    String
  subcategory String?
  question    String
  answer      String
  keywords    String[]
  priority    Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("knowledge_base")
}

model FlightCache {
  id            String   @id @default(cuid())
  flightNumber  String   @unique
  flightData    Json
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  
  @@map("flight_cache")
}

model FeedbackForm {
  id          String   @id @default(cuid())
  sessionId   String
  rating      Int?
  feedback    String?
  email       String?
  phone       String?
  isResolved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@map("feedback_forms")
}

model SupportAgent {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  
  @@map("support_agents")
}

model ScrapingCache {
  id          String   @id @default(cuid())
  url         String   @unique
  content     String
  lastScraped DateTime @default(now())
  expiresAt   DateTime
  
  @@map("scraping_cache")
}

model ChatAnalytics {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  totalChats  Int      @default(0)
  successful  Int      @default(0)
  failed      Int      @default(0)
  avgResponse Float?
  topQueries  Json?
  
  @@unique([date])
  @@map("chat_analytics")
} 